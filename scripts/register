#!/bin/bash

set -e

source .env
source scripts/helpers/functions

timestamp=$(date +%s)

workdir=$(pwd)
priv_key_path="data/raiko/secrets/priv.key"

declare -A bootstrap_path
bootstrap_path["reth"]="data/raiko/config/bootstrap.json"
bootstrap_path["geth"]="data/raiko/config/bootstrap.gaiko.json"

mkdir -p data/raiko/config
mkdir -p data/raiko/secrets

if [[ -f "$priv_key_path" ]]; then
  echo "ðŸ”‘ Found existing raiko private key"

  ask "Do you want to register again? [Y/N]" REGISTER_AGAIN "N"
  if [ "$REGISTER_AGAIN" = "N" ] || [ "$REGISTER_AGAIN" = "n" ]; then
    exit 0
  fi

  docker compose down

  sudo mv "${priv_key_path}" "${priv_key_path}.${timestamp}"
  sudo mv "${bootstrap_path["reth"]}" "${bootstrap_path["reth"]}.${timestamp}"
  sudo mv "${bootstrap_path["geth"]}" "${bootstrap_path["geth"]}.${timestamp}"

  sed -i "s/^RAIKO_SN_RETH_INSTANCE_ID=/RAIKO_SN_RETH_INSTANCE_ID=\n# ${timestamp} RAIKO_SN_RETH_INSTANCE_ID=/g" ".env"
  sed -i "s/^RAIKO_SN_GETH_INSTANCE_ID=/RAIKO_SN_GETH_INSTANCE_ID=\n# ${timestamp} RAIKO_SN_GETH_INSTANCE_ID=/g" ".env"

  if [[ "$RAIKO_SN_RAIKO_IMAGE" == "raiko" ]]; then
    ask "Do you want to rebuild images? [Y/N]" BUILD_AGAIN "N"
    if [ "$BUILD_AGAIN" != "N" ] && [ "$BUILD_AGAIN" != "n" ]; then
      docker compose build
    fi
  else
    ask "Do you want to pull the latest images? [Y/N]" PULL_AGAIN "N"
    if [ "$PULL_AGAIN" != "N" ] && [ "$PULL_AGAIN" != "n" ]; then
      docker compose pull
    fi
  fi
fi

docker compose up -d pccs && sleep 8
docker compose run --rm raiko --init

mono_deps_path="$workdir/.mono-deps"
current_rev=$(git rev-parse --short HEAD:src/taiko-mono)
installed_rev=$(cat "$mono_deps_path" 2>/dev/null || echo "-")
cd "src/taiko-mono/packages/protocol"
if [[ "$current_rev" != "$installed_rev" ]]; then
  pnpm install
  pnpm compile
  echo "${current_rev}" >"$mono_deps_path"
fi

ask "Enter the gas price in wei, empty for auto-detect:" GAS_PRICE
if [[ -n $GAS_PRICE ]]; then
  ETH_GAS_PRICE=$GAS_PRICE
fi

declare -A l1_rpc_defaults
l1_rpc_defaults["holesky"]=${RAIKO_SN_HOLESKY_RPC:-"https://ethereum-holesky-rpc.publicnode.com"}
l1_rpc_defaults["ethereum"]=${RAIKO_SN_ETHEREUM_RPC:-"https://ethereum-rpc.publicnode.com"}

if [[ -z $RAIKO_SN_ETHEREUM_RPC && -z $RAIKO_SN_HOLESKY_RPC ]]; then
  ask "Provide L1 RPC url: " L1_RPC "${l1_rpc_defaults[${RAIKO_SN_L1_NETWORK}]}"
else
  L1_RPC=${l1_rpc_defaults[${RAIKO_SN_L1_NETWORK}]}
fi

ask "Provide your private key:" PRIVATE_KEY

export RAIKO_SN_L1_NETWORK
export L1_RPC
export PRIVATE_KEY
export ETH_GAS_PRICE

for PROVER_IMPL in "geth" "reth"; do
  export PROVER_IMPL
  sgxreth_quote=$(jq -r '.quote' <"${bootstrap_path[$PROVER_IMPL]}")
  export V3_QUOTE_BYTES=${sgxreth_quote}

  set +e
  register_sgx_path="$workdir/scripts/helpers/register-sgx"
  registration_process=$($register_sgx_path 2>&1 | tee /dev/tty)
  echo "$registration_process" >"$workdir/data/logs/raiko/registration.$PROVER_IMPL.$timestamp.log"
done

unset PRIVATE_KEY
cd "$workdir"

success_parse_forge_output=true
for PROVER_IMPL in "geth" "reth"; do
  INSTANCE_ID=$(node ./scripts/helpers/parse-forge-output.mjs "$workdir/data/logs/raiko/registration.$PROVER_IMPL.$timestamp.log")
  if [[ -z $INSTANCE_ID ]]; then
    echo "ðŸš« Failed to register SGX ${PROVER_IMPL^^} instance. Registration logs are saved at: $workdir/data/logs/raiko/registration.$PROVER_IMPL.$timestamp.log"
    success_parse_forge_output=false
  else
    sed -i "s/^RAIKO_SN_${PROVER_IMPL^^}_INSTANCE_ID=/RAIKO_SN_${PROVER_IMPL^^}_INSTANCE_ID=$INSTANCE_ID/g" ".env"
    echo "âœ… Registered SGX ${PROVER_IMPL^^} instance with ID: $INSTANCE_ID"
  fi
done

if [[ $success_parse_forge_output == false ]]; then
  exit 1
fi

docker compose down && docker compose up -d

public_ip=$(curl -s ifconfig.me)
echo && echo "ðŸš€ raiko is running and accessible at: http://${public_ip}:${RAIKO_SN_RAIKO_PORT:-8080}"

if [[ $COMPOSE_PROFILES == "metrics" ]]; then
  echo "ðŸ“Š Prometheus is running and accessible at: http://${public_ip}:${RAIKO_SN_PROMETHEUS_PORT:-9090}"
  echo "ðŸ“ˆ Grafana is running and accessible at: http://${public_ip}:${RAIKO_SN_GRAFANA_PORT:-3000}"
fi

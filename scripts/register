#!/bin/bash

set -e

source .env
source scripts/helpers/functions

timestamp=$(date +%s)

priv_key_path="data/raiko/secrets/priv.key"
bootstrap_path="data/raiko/config/bootstrap.json"

mkdir -p data/raiko/config
mkdir -p data/raiko/secrets

if [[ -f "$priv_key_path" ]]; then
  echo "ðŸ”‘ Found existing raiko private key"

  ask "Do you want to register again? [Y/N]" REGISTER_AGAIN "N"
  if [ "$REGISTER_AGAIN" = "N" ] || [ "$REGISTER_AGAIN" = "n" ]; then
    exit 0
  fi

  docker compose down
  sudo mv "${priv_key_path}" "${priv_key_path}.${timestamp}"
  sudo mv "${bootstrap_path}" "${bootstrap_path}.${timestamp}"
  sed -i "s/^SRN_INSTANCE_ID=/SRN_INSTANCE_ID=\n# ${timestamp} SRN_INSTANCE_ID=/g" ".env"

  if [[ "$SRN_RAIKO_IMAGE" == "raiko" ]]; then
    ask "Do you want to rebuild images? [Y/N]" BUILD_AGAIN "N"
    if [ "$BUILD_AGAIN" != "N" ] && [ "$BUILD_AGAIN" != "n" ]; then
      docker compose build
    fi
  else
    ask "Do you want to pull the latest images? [Y/N]" PULL_AGAIN "N"
    if [ "$PULL_AGAIN" != "N" ] && [ "$PULL_AGAIN" != "n" ]; then
      docker compose pull
    fi
  fi

  sleep 5
fi

docker compose run --rm raiko --init

quote=$(jq -r '.quote' <"$bootstrap_path")
export V3_QUOTE_BYTES=${quote}

ask "Provide your private key:" PRIVATE_KEY
ask "Enter the gas price in wei, empty for auto-detect:" ETH_GAS_PRICE

declare -A L1_RPC_DEFAULTS
L1_RPC_DEFAULTS["holesky"]=${SRN_HOLESKY_RPC:-"https://rpc.ankr.com/eth_holesky"}
L1_RPC_DEFAULTS["ethereum"]=${SRN_ETHEREUM_RPC:-"https://rpc.ankr.com/eth"}

if [[ -z $SRN_ETHEREUM_RPC && -z $SRN_HOLESKY_RPC ]]; then
  ask "Provide L1 RPC url: " L1_RPC "${L1_RPC_DEFAULTS[${SRN_L1_NETWORK}]}"
else
  L1_RPC=${L1_RPC_DEFAULTS[${SRN_L1_NETWORK}]}
fi

register_sgx_path=$(pwd)/scripts/helpers/register-sgx
mono_deps_path=$(pwd)/.mono-deps

current_rev=$(git rev-parse --short HEAD:src/taiko-mono)
installed_rev=$(cat "$mono_deps_path" 2>/dev/null || echo "-")
cd "src/taiko-mono/packages/protocol"
if [[ "$current_rev" != "$installed_rev" ]]; then
  pnpm install
  pnpm compile
  echo "${current_rev}" >"$mono_deps_path"
fi

export SRN_L1_NETWORK
export L1_RPC
export PRIVATE_KEY
export ETH_GAS_PRICE

set +e
registration_process=$($register_sgx_path 2>&1 | tee /dev/tty)

SGX_INSTANCE_ID=$(node ./scripts/helpers/parse-forge-output.mjs "$registration_process")
if [[ -z $SGX_INSTANCE_ID ]]; then
  echo "ðŸš« Failed to register SGX instance"
  exit 1
fi

unset PRIVATE_KEY
echo "$registration_process"
cd -

sed -i "s/^SRN_INSTANCE_ID=/SRN_INSTANCE_ID=$SGX_INSTANCE_ID/g" ".env"
echo "âœ… Registered SGX instance with ID: $SGX_INSTANCE_ID"

docker compose down && docker compose up -d

public_ip=$(curl -s ifconfig.me)
echo && echo "ðŸš€ raiko is running and accessible at: http://${public_ip}:${SRN_RAIKO_PORT:-8080}"

if [[ $COMPOSE_PROFILES == "metrics" ]]; then
  echo "ðŸ“Š Prometheus is running and accessible at: http://${public_ip}:${SRN_PROMETHEUS_PORT:-9090}"
  echo "ðŸ“ˆ Grafana is running and accessible at: http://${public_ip}:${SRN_GRAFANA_PORT:-3000}"
fi
